// utils/gameLogic.js - –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –∏ —Ä–∞—Å—á–µ—Ç—ã

const { LEAGUES, LEAGUE_POINTS, BASE_CAR_STATS } = require('../config/constants');
const { pool } = require('../config/database');

// === –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –õ–ò–ì–ò –ü–û –ú–û–©–ù–û–°–¢–ò ===
function getLeagueByPower(carPower) {
  for (const [key, league] of Object.entries(LEAGUES)) {
    if (carPower >= league.minPower && carPower <= league.maxPower) {
      return key;
    }
  }
  return 'BRONZE';
}

// === –†–ê–°–ß–ï–¢ –ú–û–©–ù–û–°–¢–ò –ú–ê–®–ò–ù–´ ===
function calculateCarScore(car) {
  if (!car || !car.parts) return 0;
  
  const base = BASE_CAR_STATS[car.id] || BASE_CAR_STATS['car_001'];
  
  let power = base.power;
  let speed = base.speed;
  let style = base.style;
  let reliability = base.reliability;
  
  if (car.parts.engine) power += (car.parts.engine.level || 0) * 5;
  if (car.parts.tires) speed += (car.parts.tires.level || 0) * 3;
  if (car.parts.style_body) style += (car.parts.style_body.level || 0) * 4;
  if (car.parts.reliability_base) reliability += (car.parts.reliability_base.level || 0) * 5;
  
  return power + speed + style + reliability;
}

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≥–æ–Ω–∫–∏ –ù–ê –°–ï–†–í–ï–†–ï
function createRaceEvents(racer1Events, racer2Events) {
  const events = [];
  
  // –°–æ–±—ã—Ç–∏—è –∏–≥—Ä–æ–∫–∞ (racer1)
  if (racer1Events.perfectStart) {
    events.push({ 
      type: 'player_perfect', 
      text: 'üöÄ –ò–¥–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç!', 
      time: 1000,
      participant: 'player'
    });
  }
  
  if (racer1Events.crash) {
    events.push({ 
      type: 'player_crash', 
      text: 'üí• –ó–∞–Ω–æ—Å –Ω–∞ –ø–æ–≤–æ—Ä–æ—Ç–µ!', 
      time: 4000,
      participant: 'player'
    });
  }
  
  if (racer1Events.lucky) {
    events.push({ 
      type: 'player_lucky', 
      text: 'üçÄ –ü–æ–ø—É—Ç–Ω—ã–π –≤–µ—Ç–µ—Ä!', 
      time: 2500,
      participant: 'player'
    });
  }
  
  // –°–æ–±—ã—Ç–∏—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ (racer2)
  if (racer2Events.perfectStart) {
    events.push({ 
      type: 'opponent_perfect', 
      text: 'üöÄ –°–æ–ø–µ—Ä–Ω–∏–∫: –∏–¥–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç!', 
      time: 1200,
      participant: 'opponent'
    });
  }
  
  if (racer2Events.crash) {
    events.push({ 
      type: 'opponent_crash', 
      text: 'üí• –°–æ–ø–µ—Ä–Ω–∏–∫–∞ –∑–∞–Ω–µ—Å–ª–æ!', 
      time: 4500,
      participant: 'opponent'
    });
  }
  
  if (racer2Events.lucky) {
    events.push({ 
      type: 'opponent_lucky', 
      text: 'üçÄ –°–æ–ø–µ—Ä–Ω–∏–∫—É –ø–æ–≤–µ–∑–ª–æ!', 
      time: 3000,
      participant: 'opponent'
    });
  }
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏
  return events.sort((a, b) => a.time - b.time);
}

// === –†–ê–°–ß–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–ê –ì–û–ù–ö–ò ===
function calculateBattleResult(attackerCar, defenderCar) {
  console.log('üèÅ –ù–∞—á–∏–Ω–∞–µ–º –≥–æ–Ω–∫—É:', {
    racer1: attackerCar.name,
    racer1Power: attackerCar.power,
    racer2: defenderCar.name,
    racer2Power: defenderCar.power
  });

  // –ù–û–í–´–ô –£–°–ò–õ–ï–ù–ù–´–ô RNG - —Ä–∞–∑–±—Ä–æ—Å ¬±40% –≤–º–µ—Å—Ç–æ ¬±20%
  const racer1Multiplier = Math.random() * 0.8 + 0.6; // 0.6 - 1.4 (–±—ã–ª–æ 0.8-1.2)
  const racer2Multiplier = Math.random() * 0.8 + 0.6; // 0.6 - 1.4 (–±—ã–ª–æ 0.8-1.2)

  console.log('üé≤ –£—Å–ª–æ–≤–∏—è –≥–æ–Ω–∫–∏:', {
    racer1: racer1Multiplier.toFixed(2),
    racer2: racer2Multiplier.toFixed(2)
  });

  // ‚úÖ –û–î–ò–ù–ê–ö–û–í–´–ï –®–ê–ù–°–´ –î–õ–Ø –í–°–ï–• (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–æ–ª–∏, –±–æ—Ç/–∏–≥—Ä–æ–∫)
  const racer1Lucky = Math.random() < 0.2;         // 20% —à–∞–Ω—Å –≤–µ–∑–µ–Ω–∏—è
  const racer2Lucky = Math.random() < 0.2;         // 20% —à–∞–Ω—Å –≤–µ–∑–µ–Ω–∏—è (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π!)

  console.log('üçÄ –£–¥–∞—á–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã:', {
    racer1Lucky,
    racer2Lucky
  });

  // ‚úÖ –û–î–ò–ù–ê–ö–û–í–´–ï –®–ê–ù–°–´ –ù–ê –°–û–ë–´–¢–ò–Ø –î–õ–Ø –í–°–ï–•
  const racer1PerfectStart = Math.random() < 0.05; // 5% —à–∞–Ω—Å –Ω–∞ –∏–¥–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç
  const racer1Crash = Math.random() < 0.05;        // 5% —à–∞–Ω—Å –Ω–∞ –∑–∞–Ω–æ—Å
  const racer2PerfectStart = Math.random() < 0.05; // 5% —à–∞–Ω—Å –Ω–∞ –∏–¥–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π!)
  const racer2Crash = Math.random() < 0.05;        // 5% —à–∞–Ω—Å –Ω–∞ –∑–∞–Ω–æ—Å (–æ–¥–∏–Ω–∞–∫–æ–≤—ã–π!)

  console.log('üèéÔ∏è –ì–æ–Ω–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', {
    racer1PerfectStart,
    racer1Crash,
    racer2PerfectStart,
    racer2Crash
  });

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é calculateCarScore –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ—â–Ω–æ—Å—Ç–∏
  const attackerBasePower = calculateCarScore(attackerCar);
  const defenderBasePower = calculateCarScore(defenderCar);

  // –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  let racer1Score = attackerBasePower * racer1Multiplier;
  let racer2Score = defenderBasePower * racer2Multiplier;

  // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–¥–∞—á—É (–ø–æ–ø—É—Ç–Ω—ã–π –≤–µ—Ç–µ—Ä +30%)
  if (racer1Lucky) {
    racer1Score *= 1.3;
    console.log('üçÄ –ü–µ—Ä–≤—ã–π –≥–æ–Ω—â–∏–∫ –ø–æ–π–º–∞–ª –ø–æ–ø—É—Ç–Ω—ã–π –≤–µ—Ç–µ—Ä! +30%');
  }
  
  if (racer2Lucky) {
    racer2Score *= 1.3;
    console.log('üçÄ –í—Ç–æ—Ä–æ–π –≥–æ–Ω—â–∏–∫ –ø–æ–π–º–∞–ª –ø–æ–ø—É—Ç–Ω—ã–π –≤–µ—Ç–µ—Ä! +30%');
  }

  // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–∏–º–µ–Ω—è–µ–º –≥–æ–Ω–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
  if (racer1PerfectStart && !racer1Crash) {
    racer1Score *= 2.0; // –ò–¥–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç x2
    console.log('üöÄ –ò–¥–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç –ø–µ—Ä–≤–æ–≥–æ –≥–æ–Ω—â–∏–∫–∞! x2 —Å–∫–æ—Ä–æ—Å—Ç—å');
  } else if (racer1Crash) {
    racer1Score *= 0.5; // –ó–∞–Ω–æ—Å -50%
    console.log('üí• –ü–µ—Ä–≤—ã–π –≥–æ–Ω—â–∏–∫ –∑–∞–Ω–µ—Å–ª–æ –Ω–∞ –ø–æ–≤–æ—Ä–æ—Ç–µ! -50% —Å–∫–æ—Ä–æ—Å—Ç—å');
  }

  if (racer2PerfectStart && !racer2Crash) {
    racer2Score *= 2.0; // –ò–¥–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç x2
    console.log('üöÄ –ò–¥–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ä—Ç –≤—Ç–æ—Ä–æ–≥–æ –≥–æ–Ω—â–∏–∫–∞! x2 —Å–∫–æ—Ä–æ—Å—Ç—å');
  } else if (racer2Crash) {
    racer2Score *= 0.5; // –ó–∞–Ω–æ—Å -50%
    console.log('üí• –í—Ç–æ—Ä–æ–≥–æ –≥–æ–Ω—â–∏–∫–∞ –∑–∞–Ω–µ—Å–ª–æ –Ω–∞ –ø–æ–≤–æ—Ä–æ—Ç–µ! -50% —Å–∫–æ—Ä–æ—Å—Ç—å');
  }

  // –û–∫—Ä—É–≥–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ –æ—á–∫–∏
  racer1Score = Math.round(racer1Score);
  racer2Score = Math.round(racer2Score);

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
  const attackerWins = racer1Score > racer2Score;
  const winner = attackerWins ? 'attacker' : 'defender';
  
  console.log('üèÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ–Ω–∫–∏:', {
    racer1FinalScore: racer1Score,
    racer2FinalScore: racer2Score,
    winner: attackerWins ? 'racer1' : 'racer2'
  });

  // ‚úÖ –°–û–ó–î–ê–ï–ú –°–û–ë–´–¢–ò–Ø –ì–û–ù–ö–ò –ù–ê –°–ï–†–í–ï–†–ï
  const raceEvents = createRaceEvents(
    {
      perfectStart: racer1PerfectStart,
      crash: racer1Crash,
      lucky: racer1Lucky
    },
    {
      perfectStart: racer2PerfectStart,
      crash: racer2Crash,
      lucky: racer2Lucky
    }
  );

  console.log('üìã –°–æ–±—ã—Ç–∏—è –≥–æ–Ω–∫–∏ —Å–æ–∑–¥–∞–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:', raceEvents);

  // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –≥–æ–Ω–∫–µ
  const raceReport = {
    racer1: {
      basePower: attackerBasePower,
      multiplier: racer1Multiplier.toFixed(2),
      lucky: racer1Lucky,
      perfectStart: racer1PerfectStart,
      crash: racer1Crash,
      finalScore: racer1Score
    },
    racer2: {
      basePower: defenderBasePower,
      multiplier: racer2Multiplier.toFixed(2),
      lucky: racer2Lucky,
      perfectStart: racer2PerfectStart,
      crash: racer2Crash,
      finalScore: racer2Score
    },
    winner: attackerWins ? 'racer1' : 'racer2',
    events: raceEvents // ‚úÖ –î–û–ë–ê–í–õ–Ø–ï–ú –ì–û–¢–û–í–´–ï –°–û–ë–´–¢–ò–Ø
  };

  console.log('üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ –≥–æ–Ω–∫–µ —Å —Å–æ–±—ã—Ç–∏—è–º–∏:', raceReport);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –æ–∂–∏–¥–∞–µ—Ç –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥
  return {
    winner,
    attackerScore: racer1Score,
    defenderScore: racer2Score,
    margin: Math.abs(racer1Score - racer2Score),
    attackerHadLuck: racer1Lucky || racer1PerfectStart,
    defenderHadLuck: racer2Lucky || racer2PerfectStart,
    raceReport // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å —Å–æ–±—ã—Ç–∏—è–º–∏
  };
}

// === –û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò PvP ===
async function updatePvPStats(userId, isWin) {
  try {
    const pointsChange = isWin ? LEAGUE_POINTS.win : LEAGUE_POINTS.lose;
    
    if (isWin) {
      await pool.query(`
        INSERT INTO pvp_leagues (user_id, total_wins, wins_today, league_points, win_streak, best_win_streak, last_battle_date, updated_at)
        VALUES ($1, 1, 1, $2, 1, 1, NOW(), NOW())
        ON CONFLICT (user_id) 
        DO UPDATE SET 
          total_wins = pvp_leagues.total_wins + 1,
          wins_today = pvp_leagues.wins_today + 1,
          league_points = pvp_leagues.league_points + $2,
          win_streak = pvp_leagues.win_streak + 1,
          best_win_streak = GREATEST(pvp_leagues.best_win_streak, pvp_leagues.win_streak + 1),
          last_battle_date = NOW(),
          updated_at = NOW()
      `, [userId, pointsChange]);
    } else {
      await pool.query(`
        INSERT INTO pvp_leagues (user_id, total_losses, losses_today, league_points, win_streak, last_battle_date, updated_at)
        VALUES ($1, 1, 1, GREATEST(0, $2), 0, NOW(), NOW())
        ON CONFLICT (user_id) 
        DO UPDATE SET 
          total_losses = pvp_leagues.total_losses + 1,
          losses_today = pvp_leagues.losses_today + 1,
          league_points = GREATEST(0, pvp_leagues.league_points + $2),
          win_streak = 0,
          last_battle_date = NOW(),
          updated_at = NOW()
      `, [userId, pointsChange]);
    }
    
    console.log(`üìä PvP stats updated for ${userId}: ${isWin ? 'WIN' : 'LOSS'} (+${pointsChange} points)`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ PvP:', error);
    throw error;
  }
}

// === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function formatNumber(num) {
  const number = typeof num === 'string' ? parseInt(num) || 0 : num;
  
  if (number >= 1000000) {
    return (number / 1000000).toFixed(1) + 'M';
  } else if (number >= 1000) {
    return (number / 1000).toFixed(1) + 'K';
  }
  return number.toString();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –º–∞—à–∏–Ω—ã
function isValidCar(car) {
  return car && 
         car.id && 
         car.name && 
         car.parts && 
         typeof car.parts === 'object';
}

// –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞
function calculateFuelRefillTime(lastRaceTime, hoursToRefill = 1) {
  if (!lastRaceTime) return null;
  
  const lastRace = new Date(lastRaceTime);
  const refillTime = new Date(lastRace.getTime() + (hoursToRefill * 60 * 60 * 1000));
  
  return refillTime;
}

// üîß –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ PvP –±–æ–µ–≤ (—Å —É—á–µ—Ç–æ–º —Å–±—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ —Ä–µ–∫–ª–∞–º—É)
async function checkPvPBattleLimit(userId, maxBattlesPerHour = 10) {
  try {
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    
    // üîß –ò–°–ü–†–ê–í–õ–ï–ù–û: –£—á–∏—Ç—ã–≤–∞–µ–º —Å–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ —á–µ—Ä–µ–∑ —Ä–µ–∫–ª–∞–º—É
    const recentBattles = await pool.query(`
      SELECT COUNT(*) as count 
      FROM pvp_matches 
      WHERE (attacker_id = $1 OR defender_id = $1)
      AND match_date > $2
      AND (
        battle_details IS NULL 
        OR battle_details->>'limit_reset' IS NULL 
        OR battle_details->>'limit_reset' != 'true'
      )
    `, [userId, oneHourAgo]);

    const battleCount = parseInt(recentBattles.rows[0]?.count) || 0;
    
    console.log(`üîç PvP Limit Check for ${userId}:`, {
      battleCount,
      maxAllowed: maxBattlesPerHour,
      canBattle: battleCount < maxBattlesPerHour,
      timeWindow: `${oneHourAgo.toISOString()} - ${new Date().toISOString()}`
    });
    
    return {
      canBattle: battleCount < maxBattlesPerHour,
      currentCount: battleCount,
      maxAllowed: maxBattlesPerHour,
      timeToReset: new Date(Date.now() + (60 * 60 * 1000)) // —á–µ—Ä–µ–∑ —á–∞—Å
    };
  } catch (error) {
    console.error('‚ùå Error checking PvP battle limit:', error);
    return { canBattle: true, currentCount: 0, maxAllowed: maxBattlesPerHour };
  }
}

// üÜï –§–£–ù–ö–¶–ò–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ô –û–ß–ò–°–¢–ö–ò –°–¢–ê–†–´–• –§–õ–ê–ì–û–í
async function cleanupOldResetFlags() {
  try {
    const twoHoursAgo = new Date(Date.now() - 2 * 60 * 60 * 1000);
    
    const result = await pool.query(`
      UPDATE pvp_matches 
      SET battle_details = battle_details - 'limit_reset' - 'reset_time'
      WHERE match_date < $1 
        AND battle_details ? 'limit_reset'
      RETURNING match_id
    `, [twoHoursAgo]);
    
    if (result.rowCount > 0) {
      console.log(`üßπ –û—á–∏—â–µ–Ω–æ ${result.rowCount} —Å—Ç–∞—Ä—ã—Ö —Ñ–ª–∞–≥–æ–≤ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞`);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Ñ–ª–∞–≥–æ–≤:', error);
  }
}

// ‚úÖ –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –≥–æ–Ω–∫–∏ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
function getRaceDescription(raceReport) {
  const { racer1, racer2, winner, events } = raceReport;
  
  let description = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
  if (events && events.length > 0) {
    events.forEach(event => {
      description.push(event.text);
    });
  }
  
  // –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const winnerName = winner === 'racer1' ? '–í—ã' : '–°–æ–ø–µ—Ä–Ω–∏–∫';
  description.push(`üèÅ ${winnerName} —Ñ–∏–Ω–∏—à–∏—Ä—É–µ—Ç–µ –ø–µ—Ä–≤—ã–º! –°—á–µ—Ç: ${
    winner === 'racer1' ? 
    `${racer1.finalScore} - ${racer2.finalScore}` :
    `${racer2.finalScore} - ${racer1.finalScore}`
  }`);
  
  return description.join(' ');
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
module.exports = {
  getLeagueByPower,
  calculateCarScore,
  calculateBattleResult,
  updatePvPStats,
  formatNumber,
  isValidCar,
  calculateFuelRefillTime,
  checkPvPBattleLimit,
  cleanupOldResetFlags,
  getRaceDescription,
  createRaceEvents // ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
};