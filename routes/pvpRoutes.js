// routes/pvpRoutes.js - PvP API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú–ò –∞–≤–∞—Ç–∞—Ä–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π

const express = require('express');
const router = express.Router();

// –ò–º–ø–æ—Ä—Ç—ã
const { pool } = require('../config/database');
const { LEAGUES, GAME_LIMITS } = require('../config/constants');
const { 
  getLeagueByPower,
  calculateCarScore,
  calculateBattleResult,
  updatePvPStats,
  checkPvPBattleLimit,
  cleanupOldResetFlags
} = require('../utils/gameLogic');

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç–∞—Ä—ã—Ö —Ñ–ª–∞–≥–æ–≤ –∫–∞–∂–¥—ã–π —á–∞—Å
setInterval(cleanupOldResetFlags, 60 * 60 * 1000);

// === PvP API –≠–ù–î–ü–û–ò–ù–¢–´ ===

// GET /api/pvp/league-info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–≥–µ –∏–≥—Ä–æ–∫–∞
router.get('/league-info', async (req, res) => {
  try {
    const userId = req.query.userId || req.userId || 'default';
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –º–∞—à–∏–Ω—É –∏ –µ—ë –º–æ—â–Ω–æ—Å—Ç—å
    const userResult = await pool.query(`
      SELECT 
        u.user_id, u.first_name, u.game_coins, u.fuel_count,
        u.player_cars, u.selected_car_id
      FROM users u
      WHERE u.user_id = $1
    `, [userId]);
    
    if (userResult.rows.length === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const user = userResult.rows[0];
    const playerCars = user.player_cars || [];
    const selectedCarId = user.selected_car_id;
    const currentCar = playerCars.find(car => car.id === selectedCarId) || playerCars[0];
    
    if (!currentCar) {
      return res.status(400).json({ error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –º–∞—à–∏–Ω—ã' });
    }
    
    const carPower = calculateCarScore(currentCar);
    const playerLeague = getLeagueByPower(carPower);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ pvp_leagues
    let pvpStats = await pool.query(
      'SELECT * FROM pvp_leagues WHERE user_id = $1',
      [userId]
    );
    
    if (pvpStats.rows.length === 0) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      pvpStats = await pool.query(`
        INSERT INTO pvp_leagues (user_id, current_league) 
        VALUES ($1, $2) 
        RETURNING *
      `, [userId, playerLeague]);
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–≥—É –µ—Å–ª–∏ –º–æ—â–Ω–æ—Å—Ç—å –º–∞—à–∏–Ω—ã –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
      if (pvpStats.rows[0].current_league !== playerLeague) {
        pvpStats = await pool.query(`
          UPDATE pvp_leagues 
          SET current_league = $2, last_league_update = NOW()
          WHERE user_id = $1 
          RETURNING *
        `, [userId, playerLeague]);
      }
    }
    
    const stats = pvpStats.rows[0];
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ –ª–∏–≥–∏
    const leaguePosition = await pool.query(`
      SELECT COUNT(*) + 1 as position
      FROM pvp_leagues 
      WHERE current_league = $1 
        AND (total_wins > $2 OR (total_wins = $2 AND total_losses < $3))
    `, [playerLeague, stats.total_wins, stats.total_losses]);
    
    res.json({
      success: true,
      data: {
        currentLeague: playerLeague,
        leagueInfo: LEAGUES[playerLeague],
        carPower,
        carName: currentCar.name,
        stats: stats,
        position: leaguePosition.rows[0]?.position || 1,
        canFight: user.fuel_count > 0
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–∏–≥–µ:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// GET /api/pvp/opponents - –ü–æ–∏—Å–∫ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤ (‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û)
router.get('/opponents', async (req, res) => {
  try {
    const userId = req.query.userId || req.userId || 'default';
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –∏–≥—Ä–æ–∫–µ
    const userResult = await pool.query(`
      SELECT 
        u.user_id, u.first_name, u.game_coins, u.fuel_count,
        u.player_cars, u.selected_car_id
      FROM users u
      WHERE u.user_id = $1
    `, [userId]);
    
    if (userResult.rows.length === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const user = userResult.rows[0];
    const playerCars = user.player_cars || [];
    const currentCar = playerCars.find(car => car.id === user.selected_car_id) || playerCars[0];
    
    if (!currentCar) {
      return res.status(400).json({ error: '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –º–∞—à–∏–Ω—ã' });
    }
    
    const playerPower = calculateCarScore(currentCar);
    const playerLeague = getLeagueByPower(playerPower);
    
    console.log(`üë§ –ò–≥—Ä–æ–∫ ${userId}: –º–æ—â–Ω–æ—Å—Ç—å ${playerPower}, –ª–∏–≥–∞ ${playerLeague}`);
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–∏—Å–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –° –ê–í–ê–¢–ê–†–ö–ê–ú–ò –ò –°–¢–ê–¢–ò–°–¢–ò–ö–û–ô
    const realPlayersResult = await pool.query(`
      SELECT 
        u.user_id,
        u.first_name as username,
        u.player_photo,
        u.player_cars,
        u.selected_car_id,
        u.last_exit_time,
        COALESCE(p.total_wins, 0) as total_wins,
        COALESCE(p.total_losses, 0) as total_losses,
        COALESCE(p.current_league, $2) as current_league
      FROM users u
      LEFT JOIN pvp_leagues p ON u.user_id = p.user_id
      WHERE u.user_id != $1  
        AND u.player_cars IS NOT NULL 
        AND u.player_cars != '[]'
        AND u.selected_car_id IS NOT NULL
        AND u.last_exit_time > NOW() - INTERVAL '7 days'
      ORDER BY u.last_exit_time DESC
      LIMIT 3
    `, [userId, playerLeague]);

    const realPlayers = realPlayersResult.rows.map(player => {
      const playerCars = player.player_cars || [];
      const selectedCar = playerCars.find(car => car.id === player.selected_car_id) || playerCars[0];
      const carPower = selectedCar ? calculateCarScore(selectedCar) : 100;
      
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –†–ï–ê–õ–¨–ù–´–ô –≤–∏–Ω—Ä–µ–π—Ç
      const totalGames = player.total_wins + player.total_losses;
      const winRate = totalGames > 0 ? Math.round((player.total_wins / totalGames) * 100) : 50;
      
      return {
        user_id: player.user_id,
        username: player.username || '–ò–≥—Ä–æ–∫',
        player_photo: player.player_photo, // ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û!
        car_name: selectedCar?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–∞—à–∏–Ω–∞',
        car_power: carPower,
        total_wins: player.total_wins, // ‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_losses: player.total_losses, // ‚úÖ –†–ï–ê–õ–¨–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        current_league: player.current_league,
        type: 'player',
        last_active: player.last_exit_time,
        powerDifference: carPower - playerPower,
        winRate: winRate, // ‚úÖ –†–ï–ê–õ–¨–ù–´–ô –≤–∏–Ω—Ä–µ–π—Ç
        isOnline: (Date.now() - new Date(player.last_exit_time).getTime()) < 30 * 60 * 1000
      };
    }).filter(player => Math.abs(player.powerDifference) <= 100);
    
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: ${realPlayers.length}`);
    
    // ü§ñ –ü–û–ò–°–ö –ë–û–¢–û–í (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    const bots = await pool.query(`
      SELECT 
        'bot_' || bot_id as user_id,
        bot_name as username,
        car_name,
        car_power,
        car_parts,
        wins as total_wins,
        losses as total_losses,
        league as current_league,
        'bot' as type,
        last_online as last_active
      FROM pvp_bots
      WHERE car_power BETWEEN $1 AND $2
        AND league = $3
        AND is_active = true
      ORDER BY RANDOM()
      LIMIT 8
    `, [playerPower - 50, playerPower + 50, playerLeague]);
    
    console.log(`ü§ñ –ù–∞–π–¥–µ–Ω–æ –±–æ—Ç–æ–≤: ${bots.rows.length}`);
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    const allOpponents = [...realPlayers, ...bots.rows].map(opponent => {
      let realCarPower = opponent.car_power;
      
      // –î–ª—è –±–æ—Ç–æ–≤ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—é–Ω–∏–Ω–≥–∞
      if (opponent.type === 'bot' && opponent.car_parts) {
        const tempCar = {
          id: `bot_car_${opponent.user_id}`,
          parts: opponent.car_parts
        };
        realCarPower = calculateCarScore(tempCar);
        console.log(`üîç –ë–æ—Ç ${opponent.username}: –±–∞–∑–æ–≤–∞—è –º–æ—â–Ω–æ—Å—Ç—å ${opponent.car_power} ‚Üí —Ä–µ–∞–ª—å–Ω–∞—è ${realCarPower}`);
      }
      
      return {
        ...opponent,
        car_power: realCarPower,
        winRate: opponent.total_wins + opponent.total_losses > 0 
          ? Math.round((opponent.total_wins / (opponent.total_wins + opponent.total_losses)) * 100)
          : 50,
        powerDifference: realCarPower - playerPower,
        isOnline: opponent.type === 'bot' || 
          (new Date() - new Date(opponent.last_active)) < 30 * 60 * 1000,
        priority: opponent.type === 'player' ? 1 : 2
      };
    }).sort((a, b) => a.priority - b.priority);
    
    console.log(`‚öîÔ∏è –ò—Ç–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤: ${allOpponents.length}`);
    
    res.json({
      success: true,
      data: {
        opponents: allOpponents,
        playerLeague,
        playerPower,
        entryFee: LEAGUES[playerLeague].entryFee
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–æ–≤:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// POST /api/pvp/challenge - –í—ã–∑–≤–∞—Ç—å –Ω–∞ –¥—É—ç–ª—å (‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û)
router.post('/challenge', async (req, res) => {
  try {
    const { userId, opponentId, message } = req.body;
    const finalUserId = userId || req.userId || 'default';
    
    console.log('üîç PvP Challenge Debug:', {
      userId: finalUserId,
      opponentId,
      timestamp: new Date().toISOString()
    });
    
    if (!opponentId) {
      return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω —Å–æ–ø–µ—Ä–Ω–∏–∫' });
    }
    
    if (opponentId === finalUserId) {
      return res.status(400).json({ error: '–ù–µ–ª—å–∑—è –≤—ã–∑–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –±–æ–µ–≤ –≤ —á–∞—Å
    const battleLimit = await checkPvPBattleLimit(finalUserId, GAME_LIMITS.MAX_PVP_BATTLES_PER_HOUR);
    if (!battleLimit.canBattle) {
      return res.status(429).json({ 
        error: `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –±–æ–µ–≤ –∑–∞ —á–∞—Å (${battleLimit.currentCount}/${battleLimit.maxAllowed}). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Ä–µ–∫–ª–∞–º—É.`
      });
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ –∏–≥—Ä–æ–∫–∞
    const userResult = await pool.query(`
      SELECT 
        u.user_id, u.first_name, u.game_coins, u.fuel_count,
        u.player_cars, u.selected_car_id
      FROM users u
      WHERE u.user_id = $1
    `, [finalUserId]);
    
    if (userResult.rows.length === 0) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    const user = userResult.rows[0];
    const playerCars = user.player_cars || [];
    const currentCar = playerCars.find(car => car.id === user.selected_car_id) || playerCars[0];
    
    if (!currentCar || user.fuel_count <= 0) {
      return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–ø–ª–∏–≤–∞ –¥–ª—è –±–æ—è' });
    }
    
    const playerPower = calculateCarScore(currentCar);
    const playerLeague = getLeagueByPower(playerPower);
    const entryFee = LEAGUES[playerLeague].entryFee;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    if (user.game_coins < entryFee) {
      return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —É—á–∞—Å—Ç–∏—è' });
    }
    
    // –°–ø–∏—Å—ã–≤–∞–µ–º –º–æ–Ω–µ—Ç—ã
    await pool.query('UPDATE users SET game_coins = game_coins - $1 WHERE user_id = $2', [entryFee, finalUserId]);
    
    // ü§ñ –ë–û–ô –° –ë–û–¢–û–ú (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if (opponentId.startsWith('bot_')) {
      const botId = opponentId.replace('bot_', '');
      const bot = await pool.query('SELECT * FROM pvp_bots WHERE bot_id = $1', [botId]);
      
      if (bot.rows.length === 0) {
        await pool.query('UPDATE users SET game_coins = game_coins + $1 WHERE user_id = $2', [entryFee, finalUserId]);
        return res.status(400).json({ error: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      const botData = bot.rows[0];
      
      // –°–æ–∑–¥–∞–µ–º –º–∞—à–∏–Ω—É –±–æ—Ç–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º —Ç—é–Ω–∏–Ω–≥–æ–º
      let botCarParts = {};
      
      if (botData.car_parts && typeof botData.car_parts === 'object') {
        botCarParts = botData.car_parts;
        console.log(`ü§ñ –ë–æ—Ç ${botData.bot_name} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π —Ç—é–Ω–∏–Ω–≥:`, botCarParts);
      } else {
        console.log(`‚ö†Ô∏è –£ –±–æ—Ç–∞ ${botData.bot_name} –Ω–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç—é–Ω–∏–Ω–≥–∞, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π`);
        const totalLevels = Math.min(20, Math.floor(botData.car_power / 20));
        botCarParts = {
          engine: { level: Math.floor(totalLevels * 0.4) },
          tires: { level: Math.floor(totalLevels * 0.3) },
          style_body: { level: Math.floor(totalLevels * 0.2) },
          reliability_base: { level: Math.floor(totalLevels * 0.1) }
        };
      }
      
      const botCar = {
        id: `bot_${botData.bot_id}`,
        name: botData.car_name,
        parts: botCarParts
      };
      
      console.log(`üèéÔ∏è –°–æ–∑–¥–∞–Ω–∞ –º–∞—à–∏–Ω–∞ –±–æ—Ç–∞:`, {
        name: botCar.name,
        parts: botCar.parts,
        calculatedPower: calculateCarScore(botCar)
      });
      
      // –°–æ–∑–¥–∞–µ–º –≤—ã–∑–æ–≤
      const challenge = await pool.query(`
        INSERT INTO pvp_challenges (
          from_user_id, to_user_id, league, entry_fee, from_car_power, to_car_power
        ) VALUES ($1, $2, $3, $4, $5, $6)
        RETURNING *
      `, [finalUserId, opponentId, playerLeague, entryFee, playerPower, calculateCarScore(botCar)]);
      
      // –†–∞—Å—á–µ—Ç –±–æ—è
      const battleResult = calculateBattleResult(currentCar, botCar);
      const league = LEAGUES[playerLeague];
      
      const winnerReward = league.rewards.win;
      const loserReward = league.rewards.lose;
      
      const isPlayerWinner = battleResult.winner === 'attacker';
      const playerReward = isPlayerWinner ? winnerReward : loserReward;
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –º–∞—Ç—á–∞
      await pool.query(`
        INSERT INTO pvp_matches (
          challenge_id, attacker_id, defender_id, league,
          attacker_car_power, defender_car_power,
          attacker_car_name, defender_car_name,
          winner, attacker_reward, defender_reward,
          attacker_score, defender_score, battle_details
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
      `, [
        challenge.rows[0].challenge_id, finalUserId, opponentId, playerLeague,
        playerPower, calculateCarScore(botCar),
        currentCar.name, botCar.name,
        battleResult.winner,
        isPlayerWinner ? winnerReward : loserReward,
        isPlayerWinner ? loserReward : winnerReward,
        battleResult.attackerScore, battleResult.defenderScore,
        JSON.stringify(battleResult)
      ]);
      
      // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∏–≥—Ä–æ–∫—É
      await pool.query('UPDATE users SET game_coins = game_coins + $1 WHERE user_id = $2', [playerReward, finalUserId]);
      
      // –¢—Ä–∞—Ç–∏–º —Ç–æ–ø–ª–∏–≤–æ
      await pool.query('UPDATE users SET fuel_count = fuel_count - 1 WHERE user_id = $1', [finalUserId]);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä–æ–∫–∞
      await updatePvPStats(finalUserId, isPlayerWinner);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞
      if (isPlayerWinner) {
        await pool.query('UPDATE pvp_bots SET losses = losses + 1 WHERE bot_id = $1', [botId]);
      } else {
        await pool.query('UPDATE pvp_bots SET wins = wins + 1 WHERE bot_id = $1', [botId]);
      }
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–∑–æ–≤
      await pool.query(`
        UPDATE pvp_challenges 
        SET status = 'completed', completed_at = NOW()
        WHERE challenge_id = $1
      `, [challenge.rows[0].challenge_id]);
      
      console.log(`üèÜ –ë–æ–π —Å –±–æ—Ç–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω: ${isPlayerWinner ? '–ü–æ–±–µ–¥–∞' : '–ü–æ—Ä–∞–∂–µ–Ω–∏–µ'} –∏–≥—Ä–æ–∫–∞ ${finalUserId}`);
      
      res.json({
        success: true,
        data: {
          matchResult: {
            winner: battleResult.winner,
            yourResult: isPlayerWinner ? 'win' : 'lose',
            yourReward: playerReward,
            battleDetails: battleResult
          }
        }
      });
      
    } else {
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–û–ô –° –†–ï–ê–õ–¨–ù–´–ú –ò–ì–†–û–ö–û–ú
      console.log(`üë• –ë–æ–π —Å —Ä–µ–∞–ª—å–Ω—ã–º –∏–≥—Ä–æ–∫–æ–º: ${opponentId}`);
      
      const opponentResult = await pool.query(`
        SELECT user_id, first_name, player_cars, selected_car_id 
        FROM users 
        WHERE user_id = $1
      `, [opponentId]);
      
      if (opponentResult.rows.length === 0) {
        await pool.query('UPDATE users SET game_coins = game_coins + $1 WHERE user_id = $2', [entryFee, finalUserId]);
        return res.status(400).json({ error: '–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      
      const opponent = opponentResult.rows[0];
      const opponentCars = opponent.player_cars || [];
      const opponentCar = opponentCars.find(car => car.id === opponent.selected_car_id) || opponentCars[0];
      
      if (!opponentCar) {
        await pool.query('UPDATE users SET game_coins = game_coins + $1 WHERE user_id = $2', [entryFee, finalUserId]);
        return res.status(400).json({ error: '–£ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –Ω–µ—Ç –º–∞—à–∏–Ω—ã' });
      }
      
      // –°–æ–∑–¥–∞–µ–º –≤—ã–∑–æ–≤
      const challenge = await pool.query(`
        INSERT INTO pvp_challenges (
          from_user_id, to_user_id, league, entry_fee, from_car_power, to_car_power
        ) VALUES ($1, $2, $3, $4, $5, $6)
        RETURNING *
      `, [finalUserId, opponentId, playerLeague, entryFee, playerPower, calculateCarScore(opponentCar)]);
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–æ–π
      const battleResult = calculateBattleResult(currentCar, opponentCar);
      const league = LEAGUES[playerLeague];
      
      const isPlayerWinner = battleResult.winner === 'attacker';
      const playerReward = isPlayerWinner ? league.rewards.win : league.rewards.lose;
      const opponentReward = isPlayerWinner ? league.rewards.lose : league.rewards.win;
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –º–∞—Ç—á
      await pool.query(`
        INSERT INTO pvp_matches (
          challenge_id, attacker_id, defender_id, league,
          attacker_car_power, defender_car_power,
          attacker_car_name, defender_car_name,
          winner, attacker_reward, defender_reward,
          attacker_score, defender_score, battle_details
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14)
      `, [
        challenge.rows[0].challenge_id, finalUserId, opponentId, playerLeague,
        playerPower, calculateCarScore(opponentCar),
        currentCar.name, opponentCar.name,
        battleResult.winner, playerReward, opponentReward,
        battleResult.attackerScore, battleResult.defenderScore,
        JSON.stringify(battleResult)
      ]);
      
      // –í—ã–¥–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã
      await pool.query('UPDATE users SET game_coins = game_coins + $1 WHERE user_id = $2', [playerReward, finalUserId]);
      await pool.query('UPDATE users SET game_coins = game_coins + $1 WHERE user_id = $2', [opponentReward, opponentId]);
      
      // –¢—Ä–∞—Ç–∏–º —Ç–æ–ø–ª–∏–≤–æ
      await pool.query('UPDATE users SET fuel_count = fuel_count - 1 WHERE user_id = $1', [finalUserId]);
      
      // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ü–†–ê–í–ò–õ–¨–ù–û
      await updatePvPStats(finalUserId, isPlayerWinner);
      await updatePvPStats(opponentId, !isPlayerWinner);
      
      // üîî –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
      const opponentWon = !isPlayerWinner;
      const notificationTitle = opponentWon ? 'üèÜ –ü–æ–±–µ–¥–∞ –≤ PvP!' : 'üíî –ü–æ—Ä–∞–∂–µ–Ω–∏–µ –≤ PvP';
      const notificationMessage = `–ò–≥—Ä–æ–∫ ${user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} –≤—ã–∑–≤–∞–ª –≤–∞—Å –Ω–∞ –¥—É—ç–ª—å. ${opponentWon ? '–í—ã –ø–æ–±–µ–¥–∏–ª–∏' : '–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏'}! –ü–æ–ª—É—á–µ–Ω–æ: ${opponentReward} –º–æ–Ω–µ—Ç.`;

      await pool.query(`
        INSERT INTO user_notifications (user_id, type, title, message, data)
        VALUES ($1, $2, $3, $4, $5)
      `, [
        opponentId, 
        'pvp_battle', 
        notificationTitle, 
        notificationMessage,
        JSON.stringify({
          opponent_name: user.first_name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π',
          opponent_id: finalUserId,
          won: opponentWon,
          reward: opponentReward,
          match_id: challenge.rows[0].challenge_id
        })
      ]);

      console.log(`üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${opponentId}`);

      // –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–∑–æ–≤
      await pool.query(`
        UPDATE pvp_challenges SET status = 'completed', completed_at = NOW()
        WHERE challenge_id = $1
      `, [challenge.rows[0].challenge_id]);
      
      res.json({
        success: true,
        data: {
          matchResult: {
            winner: battleResult.winner,
            yourResult: isPlayerWinner ? 'win' : 'lose',
            yourReward: playerReward,
            opponentName: opponent.first_name || '–ò–≥—Ä–æ–∫',
            battleDetails: battleResult,
            isRealPlayer: true
          }
        }
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—ã–∑–æ–≤–∞:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// POST /api/pvp/reset-limit - –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ PvP –±–æ–µ–≤
router.post('/reset-limit', async (req, res) => {
  try {
    const { userId } = req.body;
    const finalUserId = userId || req.userId || 'default';
    
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞ PvP –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', finalUserId);
    
    if (!finalUserId || finalUserId === 'default') {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userResult = await pool.query(
      'SELECT user_id, first_name FROM users WHERE user_id = $1',
      [finalUserId]
    );
    
    if (userResult.rows.length === 0) {
      return res.status(404).json({ 
        success: false, 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç –±–æ–µ–≤
    const currentLimit = await checkPvPBattleLimit(finalUserId, GAME_LIMITS.MAX_PVP_BATTLES_PER_HOUR);
    
    if (currentLimit.canBattle) {
      return res.json({ 
        success: true, 
        message: '–õ–∏–º–∏—Ç —É–∂–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç, —Å–±—Ä–æ—Å –Ω–µ –Ω—É–∂–µ–Ω',
        data: {
          currentCount: currentLimit.currentCount,
          maxAllowed: currentLimit.maxAllowed,
          canBattle: true
        }
      });
    }
    
    // –ü–æ–º–µ—á–∞–µ–º –º–∞—Ç—á–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –∫–∞–∫ "—Å–±—Ä–æ—à–µ–Ω–Ω—ã–µ"
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    const resetTime = new Date().toISOString();
    
    const resetData = JSON.stringify({
      limit_reset: true,
      reset_time: resetTime
    });
    
    const updateResult = await pool.query(`
      UPDATE pvp_matches 
      SET battle_details = COALESCE(battle_details, '{}'::jsonb) || $3::jsonb
      WHERE (attacker_id = $1 OR defender_id = $1) 
        AND match_date > $2
        AND (
          battle_details IS NULL 
          OR battle_details->>'limit_reset' IS NULL 
          OR battle_details->>'limit_reset' != 'true'
        )
      RETURNING match_id, attacker_id, defender_id, match_date
    `, [finalUserId, oneHourAgo, resetData]);
    
    console.log(`‚úÖ –ü–æ–º–µ—á–µ–Ω–æ ${updateResult.rowCount} –º–∞—Ç—á–µ–π –∫–∞–∫ —Å–±—Ä–æ—à–µ–Ω–Ω—ã–µ`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const newLimit = await checkPvPBattleLimit(finalUserId, GAME_LIMITS.MAX_PVP_BATTLES_PER_HOUR);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ adsgram_rewards –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    try {
      const tableCheck = await pool.query(`
        SELECT EXISTS (
          SELECT FROM information_schema.tables 
          WHERE table_name = 'adsgram_rewards'
        );
      `);
      
      if (tableCheck.rows[0].exists) {
        await pool.query(`
          INSERT INTO adsgram_rewards (user_id, reward_type, reward_coins, block_id)
          VALUES ($1, 'pvp_limit_reset', 0, 'limit_reset_' || $2)
        `, [finalUserId, Date.now()]);
      }
    } catch (adsgramError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ adsgram_rewards:', adsgramError.message);
    }
    
    res.json({ 
      success: true, 
      message: '–õ–∏–º–∏—Ç PvP –±–æ–µ–≤ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω!',
      data: {
        canBattleNow: newLimit.canBattle,
        currentCount: newLimit.currentCount,
        maxAllowed: newLimit.maxAllowed,
        resetTime: resetTime,
        matchesReset: updateResult.rowCount
      }
    });
    
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞ PvP:', {
      message: error.message,
      stack: error.stack,
      userId: req.body?.userId,
      timestamp: new Date().toISOString()
    });
    
    res.status(500).json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–∞',
      debug: error.message
    });
  }
});

// GET /api/pvp/debug-limit - –û—Ç–ª–∞–¥–æ—á–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
router.get('/debug-limit', async (req, res) => {
  try {
    const userId = req.query.userId || req.userId || 'default';
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    
    // –í—Å–µ –º–∞—Ç—á–∏ –∑–∞ —á–∞—Å
    const allMatches = await pool.query(`
      SELECT 
        match_id, 
        attacker_id, 
        defender_id, 
        match_date, 
        battle_details,
        CASE 
          WHEN attacker_id = $1 THEN 'attacker'
          ELSE 'defender'
        END as role
      FROM pvp_matches 
      WHERE (attacker_id = $1 OR defender_id = $1)
      AND match_date > $2
      ORDER BY match_date DESC
    `, [userId, oneHourAgo]);
    
    // –¢–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ (–Ω–µ —Å–±—Ä–æ—à–µ–Ω–Ω—ã–µ)
    const activeMatches = allMatches.rows.filter(match => 
      !match.battle_details || 
      !match.battle_details.limit_reset || 
      match.battle_details.limit_reset !== 'true'
    );
    
    const currentLimit = await checkPvPBattleLimit(userId, GAME_LIMITS.MAX_PVP_BATTLES_PER_HOUR);
    
    res.json({
      success: true,
      data: {
        userId,
        timeWindow: {
          from: oneHourAgo.toISOString(),
          to: new Date().toISOString()
        },
        matches: {
          total: allMatches.rows.length,
          active: activeMatches.length,
          reset: allMatches.rows.length - activeMatches.length
        },
        limit: currentLimit,
        allMatchesDetails: allMatches.rows,
        activeMatchesDetails: activeMatches
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏ –ª–∏–º–∏—Ç–æ–≤:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// GET /api/pvp/match-history - –ò—Å—Ç–æ—Ä–∏—è –±–æ–µ–≤ (‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û)
router.get('/match-history', async (req, res) => {
  try {
    const userId = req.query.userId || req.userId || 'default';
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 20;
    const offset = (page - 1) * limit;
    
    // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –†–ï–ê–õ–¨–ù–´–ï –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
    const matches = await pool.query(`
      SELECT 
        m.*,
        CASE 
          WHEN m.attacker_id = $1 THEN 
            CASE 
              WHEN m.defender_id LIKE 'bot_%' THEN b_def.bot_name 
              ELSE COALESCE(u_def.first_name, '–ò–≥—Ä–æ–∫')
            END
          ELSE 
            CASE 
              WHEN m.attacker_id LIKE 'bot_%' THEN b_att.bot_name 
              ELSE COALESCE(u_att.first_name, '–ò–≥—Ä–æ–∫')
            END
        END as opponent_name,
        CASE 
          WHEN m.attacker_id = $1 THEN m.defender_car_name
          ELSE m.attacker_car_name
        END as opponent_car,
        CASE 
          WHEN m.attacker_id = $1 THEN 'attacker'
          ELSE 'defender'
        END as your_role,
        CASE 
          WHEN (m.attacker_id = $1 AND m.winner = 'attacker') OR 
               (m.defender_id = $1 AND m.winner = 'defender')
          THEN 'win' ELSE 'lose'
        END as result
      FROM pvp_matches m
      LEFT JOIN pvp_bots b_att ON m.attacker_id = 'bot_' || b_att.bot_id
      LEFT JOIN pvp_bots b_def ON m.defender_id = 'bot_' || b_def.bot_id
      LEFT JOIN users u_att ON m.attacker_id = u_att.user_id AND m.attacker_id NOT LIKE 'bot_%'
      LEFT JOIN users u_def ON m.defender_id = u_def.user_id AND m.defender_id NOT LIKE 'bot_%'
      WHERE m.attacker_id = $1 OR m.defender_id = $1
      ORDER BY m.match_date DESC
      LIMIT $2 OFFSET $3
    `, [userId, limit, offset]);
    
    const totalCount = await pool.query(`
      SELECT COUNT(*) as count FROM pvp_matches 
      WHERE attacker_id = $1 OR defender_id = $1
    `, [userId]);
    
    res.json({
      success: true,
      data: {
        matches: matches.rows,
        pagination: {
          page,
          limit,
          total: parseInt(totalCount.rows[0]?.count || 0),
          totalPages: Math.ceil((totalCount.rows[0]?.count || 0) / limit)
        }
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –±–æ–µ–≤:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// üÜï GET /api/pvp/bots-stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
router.get('/bots-stats', async (req, res) => {
  try {
    const botsStats = await pool.query(`
      SELECT 
        bot_name,
        car_name,
        car_power,
        car_parts,
        league,
        wins,
        losses,
        CASE 
          WHEN wins + losses > 0 THEN ROUND((wins::float / (wins + losses)) * 100, 1)
          ELSE 0
        END as win_rate,
        last_online,
        is_active
      FROM pvp_bots
      ORDER BY car_power ASC
    `);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ª–∏–≥–∞–º
    const byLeague = {};
    botsStats.rows.forEach(bot => {
      if (!byLeague[bot.league]) {
        byLeague[bot.league] = [];
      }
      byLeague[bot.league].push(bot);
    });
    
    res.json({
      success: true,
      data: {
        totalBots: botsStats.rows.length,
        activeBots: botsStats.rows.filter(bot => bot.is_active).length,
        byLeague,
        allBots: botsStats.rows
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–æ—Ç–æ–≤:', error);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router;