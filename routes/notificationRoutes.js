// routes/notificationRoutes.js - API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

const express = require('express');
const router = express.Router();
const { pool } = require('../config/database');

// GET /api/notifications - –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
router.get('/', async (req, res) => {
  try {
    const { userId } = req.query;
    
    if (!userId) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' 
      });
    }

    console.log('üîî –ü–æ–ª—É—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notifications = await pool.query(`
      SELECT 
        id,
        type,
        title,
        message,
        data,
        created_at,
        is_read
      FROM user_notifications 
      WHERE user_id = $1 
        AND is_read = false
      ORDER BY created_at DESC
      LIMIT 50
    `, [userId]);

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${notifications.rows.length} –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);

    res.json({
      success: true,
      notifications: notifications.rows
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    res.status(500).json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// POST /api/notifications/mark-read - –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
router.post('/mark-read', async (req, res) => {
  try {
    const { userId, notificationIds } = req.body;
    
    if (!userId) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' 
      });
    }

    console.log('‚úÖ –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ:', { userId, notificationIds });

    let result;
    
    if (notificationIds && Array.isArray(notificationIds) && notificationIds.length > 0) {
      // –û—Ç–º–µ—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      result = await pool.query(`
        UPDATE user_notifications 
        SET is_read = true, updated_at = NOW()
        WHERE user_id = $1 
          AND id = ANY($2::int[])
          AND is_read = false
        RETURNING id
      `, [userId, notificationIds]);
    } else {
      // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      result = await pool.query(`
        UPDATE user_notifications 
        SET is_read = true, updated_at = NOW()
        WHERE user_id = $1 
          AND is_read = false
        RETURNING id
      `, [userId]);
    }

    console.log(`‚úÖ –û—Ç–º–µ—á–µ–Ω–æ ${result.rowCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ`);

    res.json({
      success: true,
      message: `–û—Ç–º–µ—á–µ–Ω–æ ${result.rowCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ`,
      markedCount: result.rowCount
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    res.status(500).json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// GET /api/notifications/history - –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
router.get('/history', async (req, res) => {
  try {
    const { userId } = req.query;
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 20;
    const offset = (page - 1) * limit;

    if (!userId) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' 
      });
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const notifications = await pool.query(`
      SELECT 
        id,
        type,
        title,
        message,
        data,
        created_at,
        is_read
      FROM user_notifications 
      WHERE user_id = $1 
      ORDER BY created_at DESC
      LIMIT $2 OFFSET $3
    `, [userId, limit, offset]);

    // –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    const totalCount = await pool.query(`
      SELECT COUNT(*) as count 
      FROM user_notifications 
      WHERE user_id = $1
    `, [userId]);

    res.json({
      success: true,
      notifications: notifications.rows,
      pagination: {
        page,
        limit,
        total: parseInt(totalCount.rows[0]?.count || 0),
        totalPages: Math.ceil((totalCount.rows[0]?.count || 0) / limit)
      }
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    res.status(500).json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

// DELETE /api/notifications/clear - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.delete('/clear', async (req, res) => {
  try {
    const { userId } = req.body;
    
    if (!userId) {
      return res.status(400).json({ 
        success: false, 
        error: '–ù–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' 
      });
    }

    console.log('üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);

    const result = await pool.query(`
      DELETE FROM user_notifications 
      WHERE user_id = $1
      RETURNING id
    `, [userId]);

    console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${result.rowCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`);

    res.json({
      success: true,
      message: `–£–¥–∞–ª–µ–Ω–æ ${result.rowCount} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π`,
      deletedCount: result.rowCount
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    res.status(500).json({ 
      success: false, 
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' 
    });
  }
});

module.exports = router;