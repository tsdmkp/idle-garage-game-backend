const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
const crypto = require('crypto');
require('dotenv').config();

// === –ò–ú–ü–û–†–¢ –ú–û–î–£–õ–ï–ô ===
const { 
  pool,
  checkAndRestoreFuel,
  initializeDatabase,
  initializeFriendsDatabase,
  initializeAdsgramDatabase,
  gracefulShutdown
} = require('./config/database');

const { 
  LEAGUES, 
  LEAGUE_POINTS, 
  BASE_CAR_STATS, 
  GAME_LIMITS, 
  REWARDS 
} = require('./config/constants');

const { 
  getLeagueByPower,
  calculateCarScore,
  calculateBattleResult,
  updatePvPStats
} = require('./utils/gameLogic');

// === –ò–ú–ü–û–†–¢ –ú–ê–†–®–†–£–¢–û–í ===
const pvpRoutes = require('./routes/pvpRoutes');

const app = express();
const port = process.env.PORT || 3000;

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
console.log('Environment variables:');
console.log('DATABASE_URL:', process.env.DATABASE_URL ? '[DATABASE_URL configured]' : 'undefined');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram initData
const decodeInitData = (initData) => {
  try {
    // –ü–∞—Ä—Å–∏–º URL-encoded —Å—Ç—Ä–æ–∫—É
    const params = new URLSearchParams(initData);
    const data = {};
    
    for (const [key, value] of params.entries()) {
      if (key === 'user') {
        data.user = JSON.parse(value);
      } else if (key === 'start_param' || key === 'startapp') {
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ start_param –∏ startapp
        data.start_param = value;
        console.log(`üéØ Found ${key} in initData:`, value);
      } else {
        data[key] = value;
      }
    }
    
    console.log('üîç Decoded initData keys:', Object.keys(data));
    console.log('üîç start_param/startapp value:', data.start_param);
    return data;
  } catch (error) {
    console.error('‚ùå Error decoding initData:', error);
    throw error;
  }
};

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ Telegram initData
app.use(async (req, res, next) => {
  const initDataHeader = req.headers['x-telegram-init-data'];
  
  if (initDataHeader) {
    try {
      console.log('üì• Raw initData header:', initDataHeader);
      const decodedData = decodeInitData(initDataHeader);
      
      if (decodedData.user) {
        req.userId = decodedData.user.id?.toString();
        req.firstName = decodedData.user.first_name || '–ò–≥—Ä–æ–∫';
        req.username = decodedData.user.username;
      }
      
      // –í–ê–ñ–ù–û: –ò–∑–≤–ª–µ–∫–∞–µ–º start_param –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
      req.referralCode = decodedData.start_param;
      
      console.log(`‚úÖ Valid Init Data for userId: ${req.userId}`);
      console.log(`üë§ User name: ${req.firstName}`);
      console.log(`üîó Start param from initData: ${req.referralCode}`);
      
      // –ï—Å–ª–∏ start_param –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
      if (!req.referralCode) {
        console.log('‚ö†Ô∏è start_param not found in initData');
        console.log('üìã Available initData keys:', Object.keys(decodedData));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ –¥—Ä—É–≥–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        if (decodedData.startapp) {
          req.referralCode = decodedData.startapp;
          console.log('üîß Found startapp parameter:', req.referralCode);
        }
      }
      
      next();
    } catch (error) {
      console.error('‚ùå Invalid X-Telegram-Init-Data header:', error);
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å 401
      next();
    }
  } else {
    // –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ initData (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
    console.log('‚ÑπÔ∏è No X-Telegram-Init-Data header found');
    next();
  }
});

// Middleware
app.use(express.json());
app.use(cors({
  origin: '*', // –†–∞–∑—Ä–µ—à–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –æ—Ç –ª—é–±–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
  methods: ['GET', 'POST', 'PUT', 'PATCH'],
  allowedHeaders: ['Content-Type', 'X-Telegram-Init-Data'],
  credentials: true
}));

// === –ú–ê–†–®–†–£–¢–´ ===
app.use('/api/pvp', pvpRoutes);

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
app.get('/api/game_state', async (req, res) => {
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –¥–∞–Ω–Ω—ã–µ –∏–∑ initData, –∑–∞—Ç–µ–º –∏–∑ query –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const userId = req.userId || req.query.userId || 'default';
  const referralCode = req.referralCode || req.query.ref;
  const firstName = req.firstName || '–ò–≥—Ä–æ–∫';
  
  console.log('üì• GET game_state for userId:', userId);
  console.log('üîó Referral code:', referralCode);
  console.log('üë§ First name:', firstName);
  console.log('üìã Headers present:', !!req.headers['x-telegram-init-data']);
  
  try {
    const result = await pool.query(`
      SELECT 
        user_id, first_name, username, player_level, game_coins, jet_coins,
        current_xp, xp_to_next_level, income_rate_per_hour,
        last_collected_time, last_exit_time, buildings, player_cars,
        hired_staff, has_completed_tutorial, invited_by, selected_car_id,
        fuel_count, last_race_time, fuel_refill_time,
        referral_bonus_received, created_at, updated_at
      FROM users 
      WHERE user_id = $1
    `, [userId]);
    
    if (result.rows.length === 0) {
      console.log('üë§ Creating new user:', userId);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
      let referrerId = null;
      let startingCoins = 500;
      
      if (referralCode && referralCode.startsWith('ref_')) {
        referrerId = referralCode.replace('ref_', '');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Å–∞–º —Å–µ–±—è
        if (referrerId !== userId) {
          startingCoins += 100; // –ë–æ–Ω—É—Å –Ω–æ–≤–∏—á–∫—É
          console.log('üë• Valid referral! Referrer:', referrerId, 'New user bonus:', startingCoins);
        } else {
          console.log('‚ö†Ô∏è Self-referral detected, ignoring');
          referrerId = null;
        }
      } else if (referralCode) {
        console.log('‚ö†Ô∏è Invalid referral code format:', referralCode);
      } else {
        console.log('‚ÑπÔ∏è No referral code provided');
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ–ª–Ω—ã–º –±–∞–∫–æ–º —Ç–æ–ø–ª–∏–≤–∞
      const insertResult = await pool.query(`
        INSERT INTO users (
          user_id, first_name, username, player_level, game_coins, jet_coins, 
          current_xp, xp_to_next_level, buildings, player_cars, hired_staff,
          income_rate_per_hour, has_completed_tutorial, invited_by, selected_car_id,
          fuel_count, last_race_time, fuel_refill_time
        )
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18)
        RETURNING *
      `, [
        userId,
        firstName,
        req.username || null,
        1,
        startingCoins,
        0,
        10,
        100,
        JSON.stringify([
          { id: 'wash', name: 'car_wash', level: 1, icon: 'üßº', isLocked: false },
          { id: 'service', name: 'service_station', level: 0, icon: 'üîß', isLocked: false },
          { id: 'tires', name: 'tire_shop', level: 0, icon: 'üõû', isLocked: false },
          { id: 'drift', name: 'drift_school', level: 0, icon: 'üèÅ', isLocked: false }
        ]),
        JSON.stringify([{
          id: 'car_001',
          name: '–†–∂–∞–≤–∞—è "–ö–æ–ø–µ–π–∫–∞"',
          imageUrl: '/placeholder-car.png',
          stats: { power: 45, speed: 70, style: 5, reliability: 30 },
          parts: {
            engine: { level: 1, name: '–î–≤–∏–≥–∞—Ç–µ–ª—å' },
            tires: { level: 0, name: '–®–∏–Ω—ã' },
            style_body: { level: 0, name: '–ö—É–∑–æ–≤ (–°—Ç–∏–ª—å)' },
            reliability_base: { level: 1, name: '–ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å (–ë–∞–∑–∞)' }
          }
        }]),
        JSON.stringify({
          mechanic: 0, manager: 0, cleaner: 0, 
          security: 0, marketer: 0, accountant: 0
        }),
        15, // –ë–∞–∑–æ–≤—ã–π –¥–æ—Ö–æ–¥
        false,
        referrerId,
        'car_001',
        5, // ‚õΩ fuel_count - –ø–æ–ª–Ω—ã–π –±–∞–∫ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        null, // last_race_time
        null  // fuel_refill_time
      ]);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π —Ä–µ—Ñ–µ—Ä–µ—Ä, —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ
      if (referrerId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const referrerCheck = await pool.query(
          'SELECT user_id FROM users WHERE user_id = $1',
          [referrerId]
        );
        
        if (referrerCheck.rows.length > 0) {
          await pool.query(`
            INSERT INTO user_referrals (referrer_id, referred_id, referred_name, reward_coins, claimed)
            VALUES ($1, $2, $3, $4, $5)
            ON CONFLICT (referred_id) DO NOTHING
          `, [referrerId, userId, firstName, 200, false]);
          
          console.log(`‚úÖ Referral recorded: ${firstName} (${userId}) -> ${referrerId}`);
        } else {
          console.log('‚ùå Referrer not found in database:', referrerId);
        }
      }
      
      console.log('‚úÖ New user created with full fuel tank');
      res.status(200).json(insertResult.rows[0]);
    } else {
      const user = result.rows[0];
      console.log('üì¶ Found existing user:', userId);
      
      // ‚õΩ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ø–ª–∏–≤–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
      const fuelResult = checkAndRestoreFuel(
        user.fuel_count, 
        user.last_race_time, 
        user.fuel_refill_time
      );
      
      if (fuelResult.shouldRestore) {
        console.log(`‚õΩ Restoring fuel for user ${userId}: ${user.fuel_count} -> ${fuelResult.newFuel}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ø–ª–∏–≤–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const updateQuery = `
          UPDATE users 
          SET 
            fuel_count = $1,
            fuel_refill_time = $2,
            updated_at = CURRENT_TIMESTAMP
          WHERE user_id = $3
          RETURNING *
        `;
        
        const updatedResult = await pool.query(updateQuery, [
          fuelResult.newFuel,
          fuelResult.newRefillTime,
          userId
        ]);
        
        console.log('‚úÖ Fuel restored and saved to database');
        res.status(200).json(updatedResult.rows[0]);
      } else {
        res.status(200).json(user);
      }
    }
  } catch (err) {
    console.error('‚ùå Error fetching game state:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
app.post('/api/game_state', async (req, res) => {
  const { userId, ...updateData } = req.body;
  const finalUserId = userId || 'default';
  console.log('üì§ POST game_state for userId:', finalUserId, 'with data keys:', Object.keys(updateData));
  
  // ‚õΩ –õ–æ–≥–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
  if (updateData.fuel_count !== undefined || updateData.last_race_time !== undefined || updateData.fuel_refill_time !== undefined) {
    console.log('‚õΩ Fuel system update:', {
      fuel_count: updateData.fuel_count,
      last_race_time: updateData.last_race_time,
      fuel_refill_time: updateData.fuel_refill_time
    });
  }
  
  try {
    const updates = [];
    const values = [];
    let paramCount = 1;
    
    for (const [key, value] of Object.entries(updateData)) {
      if (key !== 'userId') {
        updates.push(`${key} = $${paramCount}`);
        
        // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
        if (typeof value === 'object' && value !== null) {
          values.push(JSON.stringify(value));
        } else if (key.includes('time') && value) {
          // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—Ç—Å—è
          values.push(new Date(value).toISOString());
        } else if (key === 'fuel_count') {
          // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–ø–ª–∏–≤–∞ (0-5)
          const validFuel = Math.min(Math.max(parseInt(value) || 0, 0), 5);
          values.push(validFuel);
        } else {
          values.push(value);
        }
        paramCount++;
      }
    }
    
    if (updates.length === 0) {
      console.warn('‚ö†Ô∏è No data to update for userId:', finalUserId);
      return res.status(400).json({ error: 'No data to update' });
    }
    
    updates.push(`updated_at = CURRENT_TIMESTAMP`);
    values.push(finalUserId);
    
    const query = `
      UPDATE users 
      SET ${updates.join(', ')}
      WHERE user_id = $${paramCount}
      RETURNING *
    `;
    
    const result = await pool.query(query, values);
    
    if (result.rows.length === 0) {
      console.warn('‚ö†Ô∏è User not found for update:', finalUserId);
      return res.status(404).json({ error: 'User not found' });
    }
    
    console.log('‚úÖ Updated user:', finalUserId);
    res.status(200).json(result.rows[0]);
  } catch (err) {
    console.error('‚ùå Error updating game state:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// ‚õΩ –ù–æ–≤—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ø–ª–∏–≤–æ–º
app.post('/api/fuel/refill', async (req, res) => {
  try {
    const { userId } = req.body;
    
    if (!userId) {
      return res.status(400).json({ error: 'User ID is required' });
    }

    console.log(`‚õΩ Manual fuel refill request for user: ${userId}`);

    const query = `
      UPDATE users 
      SET 
        fuel_count = 5,
        last_race_time = CURRENT_TIMESTAMP,
        fuel_refill_time = NULL,
        updated_at = CURRENT_TIMESTAMP
      WHERE user_id = $1
      RETURNING fuel_count, last_race_time, fuel_refill_time
    `;

    const result = await pool.query(query, [userId]);

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'User not found' });
    }

    console.log(`‚úÖ Fuel manually refilled for user ${userId}`);
    res.json({
      success: true,
      message: 'Fuel refilled successfully',
      fuel_data: result.rows[0]
    });

  } catch (error) {
    console.error('‚ùå Error refilling fuel:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// ‚õΩ –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–ø–ª–∏–≤–∞
app.get('/api/fuel/status', async (req, res) => {
  try {
    const userId = req.query.userId;
    
    if (!userId) {
      return res.status(400).json({ error: 'User ID is required' });
    }

    const query = `
      SELECT 
        fuel_count,
        last_race_time,
        fuel_refill_time,
        CASE 
          WHEN fuel_count >= 5 THEN false
          WHEN fuel_refill_time IS NOT NULL AND fuel_refill_time <= CURRENT_TIMESTAMP THEN true
          WHEN fuel_refill_time IS NULL AND last_race_time IS NOT NULL AND 
               (CURRENT_TIMESTAMP - last_race_time) >= INTERVAL '1 hour' THEN true
          ELSE false
        END as can_refill_now,
        CASE 
          WHEN fuel_count >= 5 THEN null
          WHEN fuel_refill_time IS NOT NULL THEN fuel_refill_time
          WHEN last_race_time IS NOT NULL THEN (last_race_time + INTERVAL '1 hour')
          ELSE null
        END as refill_available_at
      FROM users 
      WHERE user_id = $1
    `;

    const result = await pool.query(query, [userId]);

    if (result.rows.length === 0) {
      return res.status(404).json({ error: 'User not found' });
    }

    res.json({
      success: true,
      ...result.rows[0]
    });

  } catch (error) {
    console.error('‚ùå Error getting fuel status:', error);
    res.status(500).json({ error: 'Internal server error' });
  }
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ü–£–¢–¨: /api/leaderboard –≤–º–µ—Å—Ç–æ /leaderboard
app.get('/api/leaderboard', async (req, res) => {
  const userId = req.query.userId || 'default';
  console.log('üèÜ GET leaderboard for userId:', userId);

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü income_rate_per_hour
    const columnCheck = await pool.query(`
      SELECT 1 FROM information_schema.columns 
      WHERE table_name = 'users' AND column_name = 'income_rate_per_hour'
    `);
    
    if (columnCheck.rows.length === 0) {
      console.error('‚ùå Column income_rate_per_hour does not exist in users table');
      return res.status(500).json({ error: 'Database schema error: missing income_rate_per_hour column' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –¥–æ—Ö–æ–¥—É –≤ —á–∞—Å
    const topPlayersResult = await pool.query(`
      SELECT 
        user_id, 
        first_name, 
        player_level,
        income_rate_per_hour,
        game_coins
      FROM users 
      WHERE income_rate_per_hour IS NOT NULL AND income_rate_per_hour > 0
      ORDER BY income_rate_per_hour DESC, game_coins DESC 
      LIMIT 10
    `);

    console.log('üèÜ Found top players:', topPlayersResult.rows.length);

    // –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
    let currentPlayer = null;
    if (userId && userId !== 'default') {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞
      const playerResult = await pool.query(
        'SELECT user_id, first_name, player_level, income_rate_per_hour, game_coins FROM users WHERE user_id = $1',
        [userId]
      );
      
      if (playerResult.rows.length > 0) {
        const playerData = playerResult.rows[0];
        
        // –°—á–∏—Ç–∞–µ–º —Ä–∞–Ω–≥ –∏–≥—Ä–æ–∫–∞
        const rankResult = await pool.query(`
          SELECT COUNT(*) + 1 as rank
          FROM users 
          WHERE (income_rate_per_hour > $1) 
             OR (income_rate_per_hour = $1 AND game_coins > $2)
        `, [
          playerData.income_rate_per_hour || 0,
          playerData.game_coins || 0
        ]);
        
        currentPlayer = {
          ...playerData,
          rank: parseInt(rankResult.rows[0].rank)
        };
        
        console.log('üéØ Current player rank:', currentPlayer.rank);
      }
    }

    res.status(200).json({
      success: true,
      top_players: topPlayersResult.rows,
      current_player: currentPlayer,
      total_players: topPlayersResult.rows.length
    });

  } catch (err) {
    console.error('‚ùå Error fetching leaderboard:', err);
    res.status(500).json({ 
      success: false,
      error: 'Failed to fetch leaderboard data' 
    });
  }
});

// –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
app.get('/leaderboard', async (req, res) => {
  console.log('‚ö†Ô∏è Deprecated endpoint /leaderboard called, redirecting to /api/leaderboard');
  req.url = '/api/leaderboard';
  return app._router.handle(req, res);
});

// GET /api/friends - –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –¥—Ä—É–∑—å—è—Ö
app.get('/api/friends', async (req, res) => {
  const userId = req.query.userId || 'default';
  console.log('üë• Friends data request for:', userId);

  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π
    const friendsResult = await pool.query(`
      SELECT 
        ur.referred_id as user_id,
        ur.referred_name as first_name,
        ur.reward_coins,
        ur.claimed,
        ur.created_at as joined_at
      FROM user_referrals ur
      WHERE ur.referrer_id = $1
      ORDER BY ur.created_at DESC
    `, [userId]);

    // –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const statsResult = await pool.query(`
      SELECT 
        COUNT(*) as total_invites,
        SUM(CASE WHEN claimed THEN reward_coins ELSE 0 END) as total_earned,
        COUNT(CASE WHEN NOT claimed THEN 1 END) as pending_count
      FROM user_referrals
      WHERE referrer_id = $1
    `, [userId]);

    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
    const pendingRewards = await pool.query(`
      SELECT referred_name as friend_name, reward_coins as coins
      FROM user_referrals
      WHERE referrer_id = $1 AND claimed = FALSE
    `, [userId]);

    const stats = statsResult.rows[0] || { total_invites: 0, total_earned: 0, pending_count: 0 };
    
    res.json({
      success: true,
      friends: friendsResult.rows,
      total_invites: parseInt(stats.total_invites) || 0,
      total_earned: parseInt(stats.total_earned) || 0,
      pending_rewards: pendingRewards.rows,
      referral_link: `ref_${userId}`
    });

  } catch (err) {
    console.error('‚ùå Error fetching friends data:', err);
    res.status(500).json({
      success: false,
      error: 'Failed to fetch friends data'
    });
  }
});

// POST /api/friends/claim - –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
app.post('/api/friends/claim', async (req, res) => {
  const { userId } = req.body;
  console.log('üéÅ Claiming referral rewards for:', userId);

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
    const pendingRewards = await pool.query(`
      SELECT id, reward_coins
      FROM user_referrals
      WHERE referrer_id = $1 AND claimed = FALSE
    `, [userId]);

    if (pendingRewards.rows.length === 0) {
      return res.json({
        success: true,
        message: 'No pending rewards',
        total_coins: 0
      });
    }

    // –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—É–º–º—É
    const totalCoins = pendingRewards.rows.reduce((sum, reward) => sum + reward.reward_coins, 0);

    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await pool.query('BEGIN');

    try {
      // –û—Ç–º–µ—á–∞–µ–º –Ω–∞–≥—Ä–∞–¥—ã –∫–∞–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ
      await pool.query(`
        UPDATE user_referrals 
        SET claimed = TRUE 
        WHERE referrer_id = $1 AND claimed = FALSE
      `, [userId]);

      // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–Ω–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await pool.query(`
        UPDATE users 
        SET game_coins = game_coins + $1, updated_at = CURRENT_TIMESTAMP
        WHERE user_id = $2
      `, [totalCoins, userId]);

      await pool.query('COMMIT');

      console.log(`‚úÖ Claimed ${totalCoins} coins for ${userId}`);

      res.json({
        success: true,
        total_coins: totalCoins,
        rewards_count: pendingRewards.rows.length
      });

    } catch (err) {
      await pool.query('ROLLBACK');
      throw err;
    }

  } catch (err) {
    console.error('‚ùå Error claiming referral rewards:', err);
    res.status(500).json({
      success: false,
      error: 'Failed to claim rewards'
    });
  }
});

// –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞–≥—Ä–∞–¥ –æ—Ç Adsgram
app.get('/api/adsgram/reward', async (req, res) => {
  try {
    const { userid, blockId, amount } = req.query;
    
    console.log('üì∫ Adsgram reward callback received:', {
      userId: userid,
      blockId: blockId,
      amount: amount,
      timestamp: new Date().toISOString(),
      ip: req.ip || req.connection.remoteAddress,
      userAgent: req.get('User-Agent')
    });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!userid) {
      console.warn('‚ö†Ô∏è Missing userId parameter in Adsgram callback');
      return res.status(400).json({ 
        success: false, 
        error: 'Missing userId parameter' 
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const userCheck = await pool.query(
      'SELECT user_id, game_coins FROM users WHERE user_id = $1',
      [userid]
    );

    if (userCheck.rows.length === 0) {
      console.warn('‚ö†Ô∏è User not found in Adsgram callback:', userid);
      return res.status(404).json({ 
        success: false, 
        error: 'User not found' 
      });
    }

    const currentCoins = parseInt(userCheck.rows[0].game_coins) || 0;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞–≥—Ä–∞–¥—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–ª–æ–∫–∞
    let rewardCoins = 100; // –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞
    let rewardType = 'coins';
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –±–ª–æ–∫–æ–≤
    if (blockId) {
      const blockIdStr = blockId.toString();
      if (blockIdStr.includes('bonus') || blockIdStr.includes('main')) {
        // –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ - –±–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
        rewardCoins = 100;
        rewardType = 'coins';
      } else if (blockIdStr.includes('consolation') || blockIdStr.includes('race')) {
        // –£—Ç–µ—à–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–∏–∑ –ø–æ—Å–ª–µ –≥–æ–Ω–∫–∏
        rewardCoins = 50;
        rewardType = 'coins';
      } else if (blockIdStr.includes('boost') || blockIdStr.includes('income')) {
        // –ë—É—Å—Ç –¥–æ—Ö–æ–¥–∞ - –±–µ–∑ –º–æ–Ω–µ—Ç, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –±—É—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
        rewardCoins = 0;
        rewardType = 'boost';
      } else if (blockIdStr.includes('shop') || blockIdStr.includes('help')) {
        // –ü–æ–º–æ—â—å –≤ –º–∞–≥–∞–∑–∏–Ω–µ
        rewardCoins = 200;
        rewardType = 'coins';
      } else if (blockIdStr.includes('fuel') || blockIdStr === '12355') {
        // ‚õΩ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –¥–ª—è —Ç–æ–ø–ª–∏–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        rewardCoins = 0; // –ù–µ –¥–∞–µ–º –º–æ–Ω–µ—Ç—ã, —Ç–æ–ª—å–∫–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ø–ª–∏–≤–æ
        rewardType = 'fuel';
      } else {
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–ª–æ–∫ - –±–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞
        rewardCoins = 100;
        rewardType = 'coins';
      }
    }

    // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –Ω–∞–≥—Ä–∞–¥ (–Ω–µ –±–æ–ª—å—à–µ 20 –Ω–∞–≥—Ä–∞–¥ –≤ —á–∞—Å)
    const oneHourAgo = new Date(Date.now() - 60 * 60 * 1000);
    const recentRewardsCheck = await pool.query(`
      SELECT COUNT(*) as count 
      FROM adsgram_rewards 
      WHERE user_id = $1 
      AND created_at > $2
    `, [userid, oneHourAgo]);

    const recentRewardsCount = parseInt(recentRewardsCheck.rows[0]?.count) || 0;
    if (recentRewardsCount >= 20) {
      console.warn('üö® Too many Adsgram rewards per hour for user:', userid, 'Count:', recentRewardsCount);
      return res.status(429).json({ 
        success: false, 
        error: 'Too many rewards per hour' 
      });
    }

    // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    await pool.query('BEGIN');

    try {
      let updateResult = null;
      
      if (rewardType === 'fuel') {
        // ‚õΩ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ø–ª–∏–≤–æ –≤–º–µ—Å—Ç–æ –≤—ã–¥–∞—á–∏ –º–æ–Ω–µ—Ç
        updateResult = await pool.query(`
          UPDATE users 
          SET 
            fuel_count = 5,
            last_race_time = CURRENT_TIMESTAMP,
            fuel_refill_time = NULL,
            updated_at = CURRENT_TIMESTAMP
          WHERE user_id = $1
          RETURNING fuel_count, game_coins
        `, [userid]);

        console.log(`‚õΩ Adsgram fuel restore processed for user ${userid}: fuel tank refilled`);
      } else if (rewardCoins > 0) {
        // –ù–∞—á–∏—Å–ª—è–µ–º –º–æ–Ω–µ—Ç—ã
        const newCoins = currentCoins + rewardCoins;
        
        updateResult = await pool.query(`
          UPDATE users 
          SET 
            game_coins = $1,
            last_collected_time = CURRENT_TIMESTAMP,
            updated_at = CURRENT_TIMESTAMP
          WHERE user_id = $2
          RETURNING game_coins
        `, [newCoins, userid]);

        console.log(`üí∞ Adsgram reward processed: +${rewardCoins} coins for user ${userid} (${currentCoins} -> ${newCoins})`);
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—É –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      await pool.query(`
        INSERT INTO adsgram_rewards (user_id, block_id, reward_coins, reward_type, ip_address, user_agent, created_at)
        VALUES ($1, $2, $3, $4, $5, $6, NOW())
      `, [
        userid, 
        blockId || 'unknown', 
        rewardCoins, 
        rewardType,
        req.ip || req.connection.remoteAddress || 'unknown',
        req.get('User-Agent') || 'unknown'
      ]);

      await pool.query('COMMIT');

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç Adsgram —Å–µ—Ä–≤–µ—Ä—É
      const response = {
        success: true,
        userId: userid,
        rewardCoins: rewardCoins,
        rewardType: rewardType,
        newBalance: updateResult ? parseInt(updateResult.rows[0].game_coins) : currentCoins,
        fuelCount: rewardType === 'fuel' && updateResult ? updateResult.rows[0].fuel_count : undefined,
        blockId: blockId,
        timestamp: new Date().toISOString(),
        message: rewardType === 'fuel' ? 'Fuel tank refilled successfully' : 'Reward processed successfully'
      };

      console.log('‚úÖ Adsgram callback response:', response);
      res.status(200).json(response);

    } catch (transactionError) {
      await pool.query('ROLLBACK');
      throw transactionError;
    }

  } catch (error) {
    console.error('‚ùå Critical error in Adsgram reward callback:', error);
    res.status(500).json({
      success: false,
      error: 'Internal server error',
      timestamp: new Date().toISOString()
    });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ —Ä–µ–∫–ª–∞–º—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
app.get('/api/adsgram/stats', async (req, res) => {
  try {
    const { userId } = req.query;
    
    if (!userId) {
      return res.status(400).json({ error: 'userId parameter required' });
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const dayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
    
    const stats = await pool.query(`
      SELECT 
        COUNT(*) as total_views,
        SUM(reward_coins) as total_coins_earned,
        COUNT(CASE WHEN reward_type = 'fuel' THEN 1 END) as fuel_refills,
        COUNT(DISTINCT block_id) as different_blocks,
        MIN(created_at) as first_view,
        MAX(created_at) as last_view
      FROM adsgram_rewards 
      WHERE user_id = $1 
      AND created_at > $2
    `, [userId, dayAgo]);

    const blockStats = await pool.query(`
      SELECT 
        block_id,
        reward_type,
        COUNT(*) as views,
        SUM(reward_coins) as coins
      FROM adsgram_rewards 
      WHERE user_id = $1 
      AND created_at > $2
      GROUP BY block_id, reward_type
      ORDER BY views DESC
    `, [userId, dayAgo]);

    res.json({
      success: true,
      userId: userId,
      period: '24h',
      summary: stats.rows[0] || {
        total_views: 0,
        total_coins_earned: 0,
        fuel_refills: 0,
        different_blocks: 0,
        first_view: null,
        last_view: null
      },
      byBlock: blockStats.rows
    });

  } catch (error) {
    console.error('‚ùå Error getting Adsgram stats:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to get stats' 
    });
  }
});

// ========== –ó–î–û–†–û–í–¨–ï –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì ==========

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
app.get('/api/health', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const dbCheck = await pool.query('SELECT NOW() as server_time');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const tablesCheck = await pool.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name IN ('users', 'user_referrals', 'adsgram_rewards')
    `);
    
    const tables = tablesCheck.rows.map(row => row.table_name);
    
    res.json({
      status: 'healthy',
      timestamp: new Date().toISOString(),
      database: {
        connected: true,
        server_time: dbCheck.rows[0].server_time
      },
      tables: {
        users: tables.includes('users'),
        user_referrals: tables.includes('user_referrals'),
        adsgram_rewards: tables.includes('adsgram_rewards')
      },
      fuel_system: {
        enabled: true,
        max_fuel: 5,
        refill_time_hours: 1
      }
    });
    
  } catch (error) {
    console.error('‚ùå Health check failed:', error);
    res.status(503).json({
      status: 'unhealthy',
      timestamp: new Date().toISOString(),
      error: error.message
    });
  }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏)
app.get('/api/admin/stats', async (req, res) => {
  try {
    // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const userStats = await pool.query(`
      SELECT 
        COUNT(*) as total_users,
        COUNT(CASE WHEN created_at > NOW() - INTERVAL '24 hours' THEN 1 END) as new_users_24h,
        COUNT(CASE WHEN last_exit_time > NOW() - INTERVAL '24 hours' THEN 1 END) as active_users_24h,
        AVG(player_level) as avg_level,
        AVG(game_coins) as avg_coins,
        AVG(fuel_count) as avg_fuel
      FROM users
    `);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ–ø–ª–∏–≤–∞
    const fuelStats = await pool.query(`
      SELECT 
        COUNT(CASE WHEN fuel_count = 0 THEN 1 END) as users_no_fuel,
        COUNT(CASE WHEN fuel_count < 5 THEN 1 END) as users_low_fuel,
        COUNT(CASE WHEN fuel_refill_time IS NOT NULL THEN 1 END) as users_waiting_refill
      FROM users
    `);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
    const referralStats = await pool.query(`
      SELECT 
        COUNT(*) as total_referrals,
        COUNT(CASE WHEN claimed = false THEN 1 END) as pending_rewards,
        SUM(CASE WHEN claimed = true THEN reward_coins ELSE 0 END) as total_coins_paid
      FROM user_referrals
    `);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Adsgram
    const adsgramStats = await pool.query(`
      SELECT 
        COUNT(*) as total_views,
        COUNT(DISTINCT user_id) as unique_viewers,
        SUM(reward_coins) as total_coins_distributed,
        COUNT(CASE WHEN reward_type = 'fuel' THEN 1 END) as fuel_refills
      FROM adsgram_rewards
      WHERE created_at > NOW() - INTERVAL '24 hours'
    `);

    res.json({
      success: true,
      timestamp: new Date().toISOString(),
      users: userStats.rows[0],
      fuel: fuelStats.rows[0],
      referrals: referralStats.rows[0],
      adsgram_24h: adsgramStats.rows[0]
    });

  } catch (error) {
    console.error('‚ùå Error getting admin stats:', error);
    res.status(500).json({
      success: false,
      error: 'Failed to get admin stats'
    });
  }
});

// üîî API –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
app.get('/api/notifications', async (req, res) => {
  try {
    const userId = req.query.userId || req.userId || 'default';
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    const notifications = await pool.query(`
      SELECT id, type, title, message, data, created_at
      FROM user_notifications 
      WHERE user_id = $1 AND is_read = FALSE
      ORDER BY created_at DESC
      LIMIT 10
    `, [userId]);
    
    console.log(`üîî –ù–∞–π–¥–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è ${userId}: ${notifications.rows.length}`);
    
    res.json({
      success: true,
      notifications: notifications.rows,
      count: notifications.rows.length
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to get notifications' 
    });
  }
});

// –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
app.post('/api/notifications/mark-read', async (req, res) => {
  try {
    const { userId, notificationIds } = req.body;
    const finalUserId = userId || req.userId || 'default';
    
    if (notificationIds && notificationIds.length > 0) {
      // –û—Ç–º–µ—á–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await pool.query(`
        UPDATE user_notifications 
        SET is_read = TRUE 
        WHERE user_id = $1 AND id = ANY($2)
      `, [finalUserId, notificationIds]);
    } else {
      // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await pool.query(`
        UPDATE user_notifications 
        SET is_read = TRUE 
        WHERE user_id = $1 AND is_read = FALSE
      `, [finalUserId]);
    }
    
    console.log(`‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–ª—è ${finalUserId}`);
    
    res.json({ success: true });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
    res.status(500).json({ 
      success: false, 
      error: 'Failed to mark notifications as read' 
    });
  }
});

// ========== –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö ==========

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ 404 –æ—à–∏–±–æ–∫
app.use((req, res) => {
  console.log('‚ùå 404 Not Found:', req.method, req.url);
  res.status(404).json({
    error: 'Endpoint not found',
    method: req.method,
    url: req.url,
    timestamp: new Date().toISOString()
  });
});

// Middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('‚ùå Unhandled error:', err);
  res.status(500).json({
    error: 'Internal server error',
    timestamp: new Date().toISOString()
  });
});

// ========== GRACEFUL SHUTDOWN ==========
process.on('SIGTERM', gracefulShutdown);
process.on('SIGINT', gracefulShutdown);

// ========== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê ==========

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
initializeDatabase()
  .then(() => initializeFriendsDatabase())
  .then(() => initializeAdsgramDatabase())
  .then(() => {
    const server = app.listen(port, () => {
      console.log(`üöÄ Server running on port ${port}`);
      console.log(`‚õΩ Fuel system enabled (max: 5, refill: 1 hour)`);
      console.log(`üë• Friends system enabled`);
      console.log(`üì∫ Adsgram integration enabled`);
      console.log(`‚öîÔ∏è PvP system enabled`);
      console.log(`üîî Notifications system enabled`);
      console.log(`üéÆ Game state endpoint: /api/game_state`);
      console.log(`üèÜ Leaderboard endpoint: /api/leaderboard`);
      console.log(`ü§ù Friends endpoint: /api/friends`);
      console.log(`‚õΩ Fuel endpoints: /api/fuel/refill, /api/fuel/status`);
      console.log(`‚öîÔ∏è PvP endpoints: /api/pvp/*`);
      console.log(`üì∫ Adsgram webhook: /api/adsgram/reward`);
      console.log(`üìà Adsgram stats: /api/adsgram/stats`);
      console.log(`üîî Notifications: /api/notifications`);
      console.log(`üè• Health check: /api/health`);
      console.log(`üìä Admin stats: /api/admin/stats`);
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –∑–∞–Ω—è—Ç–æ–≥–æ –ø–æ—Ä—Ç–∞
    server.on('error', (err) => {
      if (err.code === 'EADDRINUSE') {
        console.log(`‚ùå Port ${port} is busy, trying ${port + 1}...`);
        setTimeout(() => {
          server.close();
          app.listen(port + 1, () => {
            console.log(`üöÄ Server running on port ${port + 1}`);
          });
        }, 1000);
      } else {
        console.error('‚ùå Server error:', err);
      }
    });
  })
  .catch(err => {
    console.error('‚ùå Failed to initialize database:', err);
    process.exit(1);
  });